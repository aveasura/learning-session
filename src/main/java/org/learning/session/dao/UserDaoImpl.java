package org.learning.session.dao;

import org.learning.session.model.User;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

// Класс напрямую общается с бд и предоставляет данные репозиторию (CRUD)
public class UserDaoImpl implements UserDao {

    private final Connection connection;

    public UserDaoImpl(Connection connection) {
        this.connection = connection;
    }

    // Это временный метод, будет удален позже
    public void createTableTMP() {
        String createTableSQL = "CREATE TABLE IF NOT EXISTS users (" +
                "user_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, " +
                "user_name VARCHAR(255) NOT NULL UNIQUE, " +
                "user_password VARCHAR(255) NOT NULL" +
                ")";

        try {
            if (connection == null || connection.isClosed()) {
                throw new SQLException("Connection to the database is not established or is closed.");
            }

            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate(createTableSQL);
                System.out.println("Table 'users' created successfully.");
            }

        } catch (SQLException e) {
            System.err.println("Error creating table 'users': " + e.getMessage());
            e.printStackTrace();
        }
    }


    @Override
    public long create(String username, String password) {
        String sql = "INSERT INTO users (user_name, user_password) VALUES (?, ?) RETURNING user_id";

        try (PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, username);
            statement.setString(2, password);

            ResultSet rs = statement.executeQuery();
            if (rs.next())
                return rs.getLong("user_id");

        } catch (SQLException e) {
            e.printStackTrace();
        }

        // При неудаче вернуть номер ошибки -1
        return -1;
    }

    @Override
    public List<User> readAll() {
        String sql = "SELECT * FROM users";
        List<User> users = new ArrayList<>();

        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            ResultSet rs = statement.executeQuery();

            while (rs.next()) {
                long id = rs.getLong("user_id");
                String username = rs.getString("user_name");
                String password = rs.getString("user_password");

                // Создаем из полученных от ДБ данных пользователя и добавляем его в список.
                User user = new User(id, username, password);
                users.add(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return users;
    }

    @Override
    public User readByUsername(String username) {
        String sql = "SELECT * FROM users WHERE user_name = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, username);
            ResultSet rs = statement.executeQuery();

            if (rs.next()) {
                return new User(
                        rs.getLong("user_id"),
                        rs.getString("user_name"),
                        rs.getString("user_password"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        // Вернуть null если не нашли пользователя.
        return null;
    }

    @Override
    public User readById(long id) {
        String sql = "SELECT * FROM users WHERE user_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setLong(1, id);
            ResultSet rs = statement.executeQuery();

            if (rs.next()) {
                return new User(
                        rs.getLong("user_id"),
                        rs.getString("user_name"),
                        rs.getString("user_password"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    public void update(long id, String username, String password) {
        String sql = "UPDATE users SET user_name = ?, user_password = ? WHERE user_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, username);
            statement.setString(2, password);
            statement.setLong(3, id);

            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void delete(long id) {
        String sql = "DELETE FROM users WHERE user_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setLong(1, id);
            statement.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
